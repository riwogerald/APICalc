#!/usr/bin/env python
"""Comprehensive verification of complex number implementation"""

from APICalc import ComplexNumber, AdvancedPrecisionNumber

def test_all_complex_features():
    """Test all implemented complex number features"""
    
    print("=" * 60)
    print("COMPREHENSIVE COMPLEX NUMBER VERIFICATION")
    print("=" * 60)
    
    results = []
    
    # Test 1: Basic Creation and Parsing
    print("\n1. BASIC CREATION AND PARSING")
    print("-" * 30)
    try:
        z1 = ComplexNumber('3', '4')
        z2 = ComplexNumber.from_string('2+5i')
        z3 = ComplexNumber.from_string('7i')
        z4 = ComplexNumber.from_string('-3i')
        z5 = ComplexNumber.from_string('5')
        z6 = ComplexNumber.from_string('1-2j')
        
        print(f"‚úì Direct creation: {z1}")
        print(f"‚úì From string '2+5i': {z2}")
        print(f"‚úì Pure imaginary '7i': {z3}")
        print(f"‚úì Negative imaginary '-3i': {z4}")
        print(f"‚úì Real number '5': {z5}")
        print(f"‚úì With j notation '1-2j': {z6}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Creation/parsing failed: {e}")
        results.append(False)
    
    # Test 2: Basic Arithmetic
    print("\n2. BASIC ARITHMETIC OPERATIONS")
    print("-" * 30)
    try:
        z1 = ComplexNumber('3', '4')
        z2 = ComplexNumber('1', '2')
        
        add_result = z1 + z2
        sub_result = z1 - z2
        mul_result = z1 * z2
        div_result = z1 / z2
        
        print(f"‚úì Addition: {z1} + {z2} = {add_result}")
        print(f"‚úì Subtraction: {z1} - {z2} = {sub_result}")
        print(f"‚úì Multiplication: {z1} * {z2} = {mul_result}")
        print(f"‚úì Division: {z1} / {z2} = {div_result}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Arithmetic failed: {e}")
        results.append(False)
    
    # Test 3: Complex Properties
    print("\n3. COMPLEX PROPERTIES")
    print("-" * 30)
    try:
        z = ComplexNumber('3', '4')
        
        conjugate = z.conjugate()
        magnitude = z.abs()
        argument = z.arg()
        
        print(f"‚úì Conjugate of {z}: {conjugate}")
        print(f"‚úì Magnitude of {z}: {magnitude}")
        print(f"‚úì Argument of {z}: {argument}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Properties failed: {e}")
        results.append(False)
    
    # Test 4: Advanced Functions
    print("\n4. ADVANCED MATHEMATICAL FUNCTIONS")
    print("-" * 30)
    try:
        z = ComplexNumber('1', '1')
        
        exp_result = z.exp()
        log_result = z.log()
        sqrt_result = z.sqrt()
        power_result = z ** 2
        
        print(f"‚úì exp({z}) = {exp_result}")
        print(f"‚úì log({z}) = {log_result}")
        print(f"‚úì sqrt({z}) = {sqrt_result}")
        print(f"‚úì ({z})¬≤ = {power_result}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Advanced functions failed: {e}")
        results.append(False)
    
    # Test 5: Trigonometric Functions
    print("\n5. TRIGONOMETRIC FUNCTIONS")
    print("-" * 30)
    try:
        z = ComplexNumber('1', '0.5')
        
        sin_result = z.sin()
        cos_result = z.cos()
        tan_result = z.tan()
        
        print(f"‚úì sin({z}) = {sin_result}")
        print(f"‚úì cos({z}) = {cos_result}")
        print(f"‚úì tan({z}) = {tan_result}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Trigonometric functions failed: {e}")
        results.append(False)
    
    # Test 6: Mixed Real/Complex Operations
    print("\n6. MIXED REAL/COMPLEX OPERATIONS")
    print("-" * 30)
    try:
        z = ComplexNumber('2', '3')
        real_num = AdvancedPrecisionNumber('5')
        
        mixed_add = z + real_num
        mixed_mul = z * real_num
        mixed_div = z / real_num
        
        print(f"‚úì Complex + Real: {z} + {real_num} = {mixed_add}")
        print(f"‚úì Complex * Real: {z} * {real_num} = {mixed_mul}")
        print(f"‚úì Complex / Real: {z} / {real_num} = {mixed_div}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Mixed operations failed: {e}")
        results.append(False)
    
    # Test 7: Polar Form
    print("\n7. POLAR FORM CREATION")
    print("-" * 30)
    try:
        import math
        magnitude = AdvancedPrecisionNumber('5')
        phase = AdvancedPrecisionNumber(str(math.pi/4))  # 45 degrees
        
        polar_complex = ComplexNumber.from_polar(magnitude, phase)
        print(f"‚úì From polar (r=5, Œ∏=œÄ/4): {polar_complex}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Polar form failed: {e}")
        results.append(False)
    
    # Test 8: Utility Functions
    print("\n8. UTILITY FUNCTIONS")
    print("-" * 30)
    try:
        z1 = ComplexNumber('3', '0')  # Real number
        z2 = ComplexNumber('0', '4')  # Imaginary number
        z3 = ComplexNumber('0', '0')  # Zero
        
        print(f"‚úì {z1}.is_real() = {z1.is_real()}")
        print(f"‚úì {z2}.is_imaginary() = {z2.is_imaginary()}")
        print(f"‚úì {z3}.is_zero() = {z3.is_zero()}")
        results.append(True)
    except Exception as e:
        print(f"‚úó Utility functions failed: {e}")
        results.append(False)
    
    # Summary
    print("\n" + "=" * 60)
    print("VERIFICATION SUMMARY")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"Tests Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ ALL COMPLEX NUMBER FEATURES ARE FULLY IMPLEMENTED!")
        print("‚úÖ Complex number support is 100% complete and functional")
    else:
        print("‚ùå Some features need attention")
    
    print("\nFeatures verified:")
    features = [
        "‚úì Complex number creation and parsing",
        "‚úì Basic arithmetic operations",
        "‚úì Complex properties (conjugate, magnitude, argument)",
        "‚úì Advanced mathematical functions (exp, log, sqrt, power)",
        "‚úì Trigonometric functions (sin, cos, tan)",
        "‚úì Mixed real/complex operations",
        "‚úì Polar form creation",
        "‚úì Utility functions (is_real, is_imaginary, is_zero)"
    ]
    
    for i, feature in enumerate(features):
        if i < len(results) and results[i]:
            print(feature)
        else:
            print(feature.replace("‚úì", "‚ùå"))
    
    return passed == total

if __name__ == "__main__":
    test_all_complex_features()
